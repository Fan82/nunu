{"ast":null,"code":"// import React, { useRef, useState, useEffect } from \"react\";\n// import { motion, useAnimation, AnimatePresence } from \"framer-motion\";\n// import van1 from \"../assets/images/van1.webp\"; // 只需導入 van1，移除 van2\n// import marker1 from \"../assets/images/cake/mainImage.webp\";\n// import marker2 from \"../assets/images/cake/mainImage.webp\"; // 重新導入 marker2\n\n// // 移除不使用的輔助函數和隨機路徑生成邏輯\n\n// export default function MapScene() {\n//   // 設定 SVG 的寬高和 viewBox 為你指定的值\n//   const svgWidth = 1280;\n//   const svgHeight = 425;\n\n//   // 現在只有一個 path 的參照 (ref)\n//   const mainPathRef = useRef(null);\n//   const controls = useAnimation();\n\n//   const [currentLoc, setCurrentLoc] = useState(null);\n//   const [showModal, setShowModal] = useState(false);\n//   const [isMoving, setIsMoving] = useState(false);\n//   const [carPos, setCarPos] = useState({ x: -50, y: -40 });\n//   const [carImg, setCarImg] = useState(van1); // 預設只使用 van1\n\n//   // Locations 陣列現在有兩個地點，都與同一個路徑相關，但位置不同\n//   const locations = [\n//     {\n//       id: 1,\n//       name: \"nunu Shop\", // 第一個地點代表路徑起點\n//       address: \"起點地址：新加坡某處\",\n//       hours: \"Mon - Sun | 10:00 - 18:00\",\n//       markerImg: marker1,\n//       carImg: van1,\n//       pathPosition: 40,\n//     },\n//     {\n//       id: 2,\n//       name: \"nunu Van\", // 第二個地點代表路徑終點\n//       address: \"終點地址：新加坡其他處\",\n//       hours: \"Weekend | 11:00 - 18:00\",\n//       markerImg: marker2,\n//       carImg: van1,\n//       pathPosition: 70,\n//     },\n//   ];\n\n//   // 在組件載入時，將車子定位在主要路徑的起點\n//   useEffect(() => {\n//     // 確保 mainPathRef.current 已經被賦值 (即 SVG 路徑已經渲染)\n//     if (mainPathRef.current) {\n//       const p = mainPathRef.current.getPointAtLength(0); // 獲取路徑起點座標\n//       // 調整車子位置使其中心點對齊路徑起點\n//       // 車子圖片是 w-16 h-16 (即 64x64px)，所以其中心點位於 (x+32, y+32)\n//       // 因此，我們需要將其左上角定位在 (x-32, y-32)\n//       setCarPos({\n//         x: p.x - -56,\n//         y: p.y - -56,\n//       });\n//     }\n//   }, []); // 空陣列表示只在組件掛載時執行一次\n\n//   // 將車子位置綁定到 Framer Motion 的 controls，以控制動畫\n//   useEffect(() => {\n//     controls.set({ x: carPos.x, y: carPos.y });\n//   }, [carPos, controls]);\n\n//   // 控制車子沿路徑行駛的動畫邏輯\n//   const moveAlong = async (pathRef) => {\n//     setIsMoving(true); // 設定移動狀態為 true\n//     const pathEl = pathRef.current;\n//     if (!pathEl) {\n//       // 安全檢查，確保路徑元素存在\n//       setIsMoving(false);\n//       return;\n//     }\n//     const totalLength = pathEl.getTotalLength(); // 獲取路徑的總長度\n\n//     await new Promise((resolve) => {\n//       let startTime = null; // 動畫開始時間\n//       const duration = 2000; // 動畫持續時間 (毫秒)\n\n//       const animate = (timestamp) => {\n//         if (!startTime) startTime = timestamp; // 初始化開始時間\n//         const elapsed = timestamp - startTime; // 經過的時間\n//         const progress = Math.min(elapsed / duration, 1); // 進度變數 (0 到 1)\n\n//         // 獲取當前進度下的路徑點座標\n//         const point = pathEl.getPointAtLength(totalLength * progress);\n//         // 更新車子位置 (置中)\n//         setCarPos({ x: point.x - 56, y: point.y - 56 });\n\n//         if (progress < 1) {\n//           requestAnimationFrame(animate); // 如果動畫未完成，繼續下一幀\n//         } else {\n//           resolve(); // 動畫完成，解決 Promise\n//         }\n//       };\n//       requestAnimationFrame(animate); // 開始動畫循環\n//     });\n\n//     // 動畫完成後，延遲 1 秒顯示 Modal 並重置移動狀態\n//     setTimeout(() => {\n//       setShowModal(true);\n//       setIsMoving(false);\n//     }, 1000);\n//   };\n\n//   // 點擊標記點時觸發的函式\n//   const onMarkerClick = (loc) => {\n//     if (isMoving) return; // 如果車子正在移動，則不響應點擊\n//     setShowModal(false); // 隱藏 Modal\n//     setCurrentLoc(loc); // 設定當前選中的地點\n//     setCarImg(loc.carImg); // 設定車子圖片 (這裡始終是 van1)\n\n//     // 由於現在只有一條主路徑，直接傳入 mainPathRef\n//     moveAlong(mainPathRef); // 觸發車子沿選定路徑行駛\n//   };\n\n//   return (\n//     // 最外層 div 容器的樣式，用於響應式顯示\n//     <div\n//       className=\"relative w-full overflow-hidden\"\n//       // 透過設定 height: 0 和 padding-top 來維持 SVG 的長寬比\n//       // padding-top 的百分比是根據 svgHeight / svgWidth 的比例計算而來，確保不同螢幕尺寸下的顯示比例正確\n//       style={{ height: 0, paddingTop: `${(svgHeight / svgWidth) * 100}%` }}\n//     >\n//       <svg\n//         className=\"absolute w-full h-full top-0 left-0\" // 確保 SVG 填滿父容器並定位在左上角\n//         viewBox={`0 0 ${svgWidth} ${svgHeight}`} // 設定 SVG 的視圖框\n//       >\n//         {/* 單一主要路徑：使用您提供的固定 d 屬性 */}\n//         <path\n//           ref={mainPathRef} // 將路徑參照綁定到 mainPathRef\n//           d=\"M-2 78.9951C-2 78.9951 490.5 -76.9943 551 63C611.5 202.994 370.5 292.5 530.5 389.5C690.5 486.5 1277.5 324 1277.5 324\"\n//           fill=\"none\" // 不填充顏色\n//           stroke=\"#3B3B3B\" // 路徑顏色\n//           strokeOpacity=\"0.63\" // 透明度\n//           strokeWidth=\"8\" // 線條寬度\n//           strokeLinecap=\"round\" // 線段末端形狀\n//           strokeLinejoin=\"round\" // 線段連接處形狀\n//           strokeDasharray=\"23 23\" // 虛線模式 (實線23，間隔23)\n//         />\n//         {/* 移除了 pathB */}\n//       </svg>\n\n//       {/* 小車圖片的 Framer Motion 動畫容器 */}\n//       <motion.img\n//         src={carImg} // 這裡只會是 van1\n//         alt=\"van\"\n//         className=\"absolute w-28 h-28\" // 固定車子尺寸 (64x64px)\n//         animate={controls} // 綁定動畫控制\n//         transition={{ ease: \"linear\", duration: 2 }} // 動畫過渡效果\n//       />\n\n//       {/* 遍歷 locations 陣列，渲染每個標記點 */}\n//       {locations.map((loc) => {\n//         // 所有標記點都使用 mainPathRef\n//         const ref = mainPathRef;\n//         // 獲取路徑的總長度，如果 ref.current 還不存在則為 0\n//         const totalLength = ref.current?.getTotalLength() || 0;\n//         // 根據 loc.pathPosition (0 或 1) 獲取路徑上對應的點座標\n//         const p = ref.current?.getPointAtLength(\n//           totalLength * loc.pathPosition\n//         ) || { x: 0, y: 0 };\n//         return (\n//           <img\n//             key={loc.id} // 唯一的 key\n//             src={loc.markerImg} // 標記點圖片 (marker1 或 marker2)\n//             alt={`marker-${loc.id}`} // 圖片替代文字\n//             className=\"absolute w-8 h-8 cursor-pointer\" // 標記點尺寸和鼠標樣式 (32x32px)\n//             style={{ left: p.x - 12, top: p.y - 12 }} // 標記點置中 (32/2 = 16，但考慮到圖片邊緣，這裡使用 12 來微調)\n//             onClick={() => onMarkerClick(loc)} // 點擊事件\n//           />\n//         );\n//       })}\n\n//       {/* Modal 顯示邏輯 (使用 AnimatePresence 處理進場/離場動畫) */}\n//       <AnimatePresence>\n//         {showModal && currentLoc && (\n//           <motion.div\n//             className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50\"\n//             initial={{ opacity: 0 }} // 初始透明度為 0\n//             animate={{ opacity: 1 }} // 動畫到透明度 1\n//             exit={{ opacity: 0 }} // 離場時動畫到透明度 0\n//           >\n//             <motion.div\n//               className=\"relative bg-white rounded-2xl p-6 shadow-2xl max-w-sm w-full border-4 border-orange-400\"\n//               initial={{ scaleX: 0 }} // 初始 X 軸縮放為 0\n//               animate={{ scaleX: 1 }} // 動畫到 X 軸縮放 1\n//               exit={{ scaleX: 0 }} // 離場時動畫到 X 軸縮放 0\n//               transition={{ duration: 0.4 }} // 過渡時間 0.4 秒\n//               style={{ transformOrigin: \"center\" }} // 變形原點為中心\n//             >\n//               <button\n//                 className=\"absolute top-3 right-3 text-2xl text-gray-500 hover:text-gray-800\"\n//                 onClick={() => setShowModal(false)} // 點擊關閉 Modal\n//               >\n//                 &times; {/* 關閉按鈕的叉號 */}\n//               </button>\n//               <h2 className=\"text-2xl font-bold text-orange-600 mb-2\">\n//                 {currentLoc.name} {/* 修正這裡：直接存取 name */}\n//               </h2>\n//               <p className=\"text-gray-700 mb-1\">\n//                 <span className=\"font-semibold\">地址：</span>\n//                 {currentLoc.address} {/* 修正這裡：直接存取 address */}\n//               </p>\n//               <p className=\"text-gray-700\">\n//                 <span className=\"font-semibold\">營業時間：</span>\n//                 {currentLoc.hours} {/* 修正這裡：直接存取 hours */}\n//               </p>\n//             </motion.div>\n//           </motion.div>\n//         )}\n//       </AnimatePresence>\n//     </div>\n//   );\n// }","map":{"version":3,"names":[],"sources":["/Users/fan/Documents/GitHub/nunu/src/component/MapScene.jsx"],"sourcesContent":["// import React, { useRef, useState, useEffect } from \"react\";\n// import { motion, useAnimation, AnimatePresence } from \"framer-motion\";\n// import van1 from \"../assets/images/van1.webp\"; // 只需導入 van1，移除 van2\n// import marker1 from \"../assets/images/cake/mainImage.webp\";\n// import marker2 from \"../assets/images/cake/mainImage.webp\"; // 重新導入 marker2\n\n// // 移除不使用的輔助函數和隨機路徑生成邏輯\n\n// export default function MapScene() {\n//   // 設定 SVG 的寬高和 viewBox 為你指定的值\n//   const svgWidth = 1280;\n//   const svgHeight = 425;\n\n//   // 現在只有一個 path 的參照 (ref)\n//   const mainPathRef = useRef(null);\n//   const controls = useAnimation();\n\n//   const [currentLoc, setCurrentLoc] = useState(null);\n//   const [showModal, setShowModal] = useState(false);\n//   const [isMoving, setIsMoving] = useState(false);\n//   const [carPos, setCarPos] = useState({ x: -50, y: -40 });\n//   const [carImg, setCarImg] = useState(van1); // 預設只使用 van1\n\n//   // Locations 陣列現在有兩個地點，都與同一個路徑相關，但位置不同\n//   const locations = [\n//     {\n//       id: 1,\n//       name: \"nunu Shop\", // 第一個地點代表路徑起點\n//       address: \"起點地址：新加坡某處\",\n//       hours: \"Mon - Sun | 10:00 - 18:00\",\n//       markerImg: marker1,\n//       carImg: van1,\n//       pathPosition: 40,\n//     },\n//     {\n//       id: 2,\n//       name: \"nunu Van\", // 第二個地點代表路徑終點\n//       address: \"終點地址：新加坡其他處\",\n//       hours: \"Weekend | 11:00 - 18:00\",\n//       markerImg: marker2,\n//       carImg: van1,\n//       pathPosition: 70,\n//     },\n//   ];\n\n//   // 在組件載入時，將車子定位在主要路徑的起點\n//   useEffect(() => {\n//     // 確保 mainPathRef.current 已經被賦值 (即 SVG 路徑已經渲染)\n//     if (mainPathRef.current) {\n//       const p = mainPathRef.current.getPointAtLength(0); // 獲取路徑起點座標\n//       // 調整車子位置使其中心點對齊路徑起點\n//       // 車子圖片是 w-16 h-16 (即 64x64px)，所以其中心點位於 (x+32, y+32)\n//       // 因此，我們需要將其左上角定位在 (x-32, y-32)\n//       setCarPos({\n//         x: p.x - -56,\n//         y: p.y - -56,\n//       });\n//     }\n//   }, []); // 空陣列表示只在組件掛載時執行一次\n\n//   // 將車子位置綁定到 Framer Motion 的 controls，以控制動畫\n//   useEffect(() => {\n//     controls.set({ x: carPos.x, y: carPos.y });\n//   }, [carPos, controls]);\n\n//   // 控制車子沿路徑行駛的動畫邏輯\n//   const moveAlong = async (pathRef) => {\n//     setIsMoving(true); // 設定移動狀態為 true\n//     const pathEl = pathRef.current;\n//     if (!pathEl) {\n//       // 安全檢查，確保路徑元素存在\n//       setIsMoving(false);\n//       return;\n//     }\n//     const totalLength = pathEl.getTotalLength(); // 獲取路徑的總長度\n\n//     await new Promise((resolve) => {\n//       let startTime = null; // 動畫開始時間\n//       const duration = 2000; // 動畫持續時間 (毫秒)\n\n//       const animate = (timestamp) => {\n//         if (!startTime) startTime = timestamp; // 初始化開始時間\n//         const elapsed = timestamp - startTime; // 經過的時間\n//         const progress = Math.min(elapsed / duration, 1); // 進度變數 (0 到 1)\n\n//         // 獲取當前進度下的路徑點座標\n//         const point = pathEl.getPointAtLength(totalLength * progress);\n//         // 更新車子位置 (置中)\n//         setCarPos({ x: point.x - 56, y: point.y - 56 });\n\n//         if (progress < 1) {\n//           requestAnimationFrame(animate); // 如果動畫未完成，繼續下一幀\n//         } else {\n//           resolve(); // 動畫完成，解決 Promise\n//         }\n//       };\n//       requestAnimationFrame(animate); // 開始動畫循環\n//     });\n\n//     // 動畫完成後，延遲 1 秒顯示 Modal 並重置移動狀態\n//     setTimeout(() => {\n//       setShowModal(true);\n//       setIsMoving(false);\n//     }, 1000);\n//   };\n\n//   // 點擊標記點時觸發的函式\n//   const onMarkerClick = (loc) => {\n//     if (isMoving) return; // 如果車子正在移動，則不響應點擊\n//     setShowModal(false); // 隱藏 Modal\n//     setCurrentLoc(loc); // 設定當前選中的地點\n//     setCarImg(loc.carImg); // 設定車子圖片 (這裡始終是 van1)\n\n//     // 由於現在只有一條主路徑，直接傳入 mainPathRef\n//     moveAlong(mainPathRef); // 觸發車子沿選定路徑行駛\n//   };\n\n//   return (\n//     // 最外層 div 容器的樣式，用於響應式顯示\n//     <div\n//       className=\"relative w-full overflow-hidden\"\n//       // 透過設定 height: 0 和 padding-top 來維持 SVG 的長寬比\n//       // padding-top 的百分比是根據 svgHeight / svgWidth 的比例計算而來，確保不同螢幕尺寸下的顯示比例正確\n//       style={{ height: 0, paddingTop: `${(svgHeight / svgWidth) * 100}%` }}\n//     >\n//       <svg\n//         className=\"absolute w-full h-full top-0 left-0\" // 確保 SVG 填滿父容器並定位在左上角\n//         viewBox={`0 0 ${svgWidth} ${svgHeight}`} // 設定 SVG 的視圖框\n//       >\n//         {/* 單一主要路徑：使用您提供的固定 d 屬性 */}\n//         <path\n//           ref={mainPathRef} // 將路徑參照綁定到 mainPathRef\n//           d=\"M-2 78.9951C-2 78.9951 490.5 -76.9943 551 63C611.5 202.994 370.5 292.5 530.5 389.5C690.5 486.5 1277.5 324 1277.5 324\"\n//           fill=\"none\" // 不填充顏色\n//           stroke=\"#3B3B3B\" // 路徑顏色\n//           strokeOpacity=\"0.63\" // 透明度\n//           strokeWidth=\"8\" // 線條寬度\n//           strokeLinecap=\"round\" // 線段末端形狀\n//           strokeLinejoin=\"round\" // 線段連接處形狀\n//           strokeDasharray=\"23 23\" // 虛線模式 (實線23，間隔23)\n//         />\n//         {/* 移除了 pathB */}\n//       </svg>\n\n//       {/* 小車圖片的 Framer Motion 動畫容器 */}\n//       <motion.img\n//         src={carImg} // 這裡只會是 van1\n//         alt=\"van\"\n//         className=\"absolute w-28 h-28\" // 固定車子尺寸 (64x64px)\n//         animate={controls} // 綁定動畫控制\n//         transition={{ ease: \"linear\", duration: 2 }} // 動畫過渡效果\n//       />\n\n//       {/* 遍歷 locations 陣列，渲染每個標記點 */}\n//       {locations.map((loc) => {\n//         // 所有標記點都使用 mainPathRef\n//         const ref = mainPathRef;\n//         // 獲取路徑的總長度，如果 ref.current 還不存在則為 0\n//         const totalLength = ref.current?.getTotalLength() || 0;\n//         // 根據 loc.pathPosition (0 或 1) 獲取路徑上對應的點座標\n//         const p = ref.current?.getPointAtLength(\n//           totalLength * loc.pathPosition\n//         ) || { x: 0, y: 0 };\n//         return (\n//           <img\n//             key={loc.id} // 唯一的 key\n//             src={loc.markerImg} // 標記點圖片 (marker1 或 marker2)\n//             alt={`marker-${loc.id}`} // 圖片替代文字\n//             className=\"absolute w-8 h-8 cursor-pointer\" // 標記點尺寸和鼠標樣式 (32x32px)\n//             style={{ left: p.x - 12, top: p.y - 12 }} // 標記點置中 (32/2 = 16，但考慮到圖片邊緣，這裡使用 12 來微調)\n//             onClick={() => onMarkerClick(loc)} // 點擊事件\n//           />\n//         );\n//       })}\n\n//       {/* Modal 顯示邏輯 (使用 AnimatePresence 處理進場/離場動畫) */}\n//       <AnimatePresence>\n//         {showModal && currentLoc && (\n//           <motion.div\n//             className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50\"\n//             initial={{ opacity: 0 }} // 初始透明度為 0\n//             animate={{ opacity: 1 }} // 動畫到透明度 1\n//             exit={{ opacity: 0 }} // 離場時動畫到透明度 0\n//           >\n//             <motion.div\n//               className=\"relative bg-white rounded-2xl p-6 shadow-2xl max-w-sm w-full border-4 border-orange-400\"\n//               initial={{ scaleX: 0 }} // 初始 X 軸縮放為 0\n//               animate={{ scaleX: 1 }} // 動畫到 X 軸縮放 1\n//               exit={{ scaleX: 0 }} // 離場時動畫到 X 軸縮放 0\n//               transition={{ duration: 0.4 }} // 過渡時間 0.4 秒\n//               style={{ transformOrigin: \"center\" }} // 變形原點為中心\n//             >\n//               <button\n//                 className=\"absolute top-3 right-3 text-2xl text-gray-500 hover:text-gray-800\"\n//                 onClick={() => setShowModal(false)} // 點擊關閉 Modal\n//               >\n//                 &times; {/* 關閉按鈕的叉號 */}\n//               </button>\n//               <h2 className=\"text-2xl font-bold text-orange-600 mb-2\">\n//                 {currentLoc.name} {/* 修正這裡：直接存取 name */}\n//               </h2>\n//               <p className=\"text-gray-700 mb-1\">\n//                 <span className=\"font-semibold\">地址：</span>\n//                 {currentLoc.address} {/* 修正這裡：直接存取 address */}\n//               </p>\n//               <p className=\"text-gray-700\">\n//                 <span className=\"font-semibold\">營業時間：</span>\n//                 {currentLoc.hours} {/* 修正這裡：直接存取 hours */}\n//               </p>\n//             </motion.div>\n//           </motion.div>\n//         )}\n//       </AnimatePresence>\n//     </div>\n//   );\n// }\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}